import ctypes

# Load necessary DLLs
advapi32 = ctypes.windll.advapi32
kernel32 = ctypes.windll.kernel32

# Define constants
SE_PRIVILEGE_ENABLED = 0x00000002
TOKEN_ADJUST_PRIVILEGES = 0x0020
TOKEN_QUERY = 0x0008
SE_DEBUG_NAME = "SeDebugPrivilege"

# Define structures
class LUID(ctypes.Structure):
    _fields_ = [("LowPart", ctypes.c_uint32), ("HighPart", ctypes.c_int32)]

class TOKEN_PRIVILEGES(ctypes.Structure):
    _fields_ = [
        ("PrivilegeCount", ctypes.c_uint32),
        ("Privileges", LUID * 1)
    ]

# Enable the privilege
def enable_privilege(privilege_name):
    hToken = ctypes.c_void_p()
    luid = LUID()
    tp = TOKEN_PRIVILEGES()
    
    # Open the process token
    if not advapi32.OpenProcessToken(kernel32.GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, ctypes.byref(hToken)):
        raise ctypes.WinError()
    
    # Lookup the privilege LUID
    if not advapi32.LookupPrivilegeValueW(None, privilege_name, ctypes.byref(luid)):
        raise ctypes.WinError()
    
    tp.PrivilegeCount = 1
    tp.Privileges[0].Luid = luid
    tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED
    
    # Adjust token privileges
    if not advapi32.AdjustTokenPrivileges(hToken, False, ctypes.byref(tp), 0, None, None):
        raise ctypes.WinError()
    
    # Close the token handle
    kernel32.CloseHandle(hToken)
    print(f"Privilege {privilege_name} enabled successfully.")

# Example usage
enable_privilege(SE_DEBUG_NAME)